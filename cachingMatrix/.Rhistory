setwd('/home/williamn/Documents/R/dataAnalysis')
reddit<- read.csv('reddit.csv')
str(reddit)
table(reddit$employment.status)
levels(reddit$age.range)
qplot(data= reddit, x = age.range)
library("ggplot2", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
setwd('/home/williamn/Documents/R/dataAnalysis')
reddit<- read.csv('reddit.csv')
str(reddit)
table(reddit$employment.status)
levels(reddit$age.range)
qplot(data= reddit, x = age.range)
complete<- function(directory, id=1:332){
setwd("/home/williamn/Repository/dataAnalysis/airPollution")
listFiles<- list.files(directory, full.names = TRUE)
dat<- data.frame()
for(i in id){
tmp<- read.csv(listFiles[i])
good_tmp<- complete.cases(tmp)
complete<- tmp[good_tmp,]
nobs<- dim(complete)
dat<- rbind(dat, c(id=i, nobs=nobs[1]))
}
colnames(dat)<- c("id", "nobs")
dat
}
setwd("/home/williamn/Repository/dataAnalysis/cachingMatrix")
getwd()
## Matrix inversion is usually a costly computation and
## their may be some benefit to caching the inverse of a matrix
## rather than compute it repeatedly.
## This script contains a pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<- c(1,0,0)
b<- c(0,1,0)
c<- c(0,0,1)
m<- rbind(a,b,c)
m
solve(m)
class(m)
cacheSolve(m)
makeCacheMatrix(m)
cacheSolve(m)
x<- matrix(4:7,nrow=2,ncol=2)
x
flist<- makeCacheMatrix(x)
cacheSolve(flist)
cacheSolve(flist)
print(identical(flist$getinverse(),solve(x)))
system.time(solve(m))
system.time(cacheSolve(flist))
