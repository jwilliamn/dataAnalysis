install.packages("party")
install.packages("randomForest")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "J. Williamn")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
?str
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
summary(mtcars)
mtcars
efficient<- mtcars[mtcars$mpg>=23,]
efficient
efficient<- mtcars[mtcars$mpg>=23,2]
efficient
dim(efficient)
efficient<- mtcars[mtcars$mpg>=23,]
dim(efficient)
di<- dim(efficient)
di(1)
di[1]
di[2]
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
mtcars[mtcars$qsec<=16.90,]
dim(mtcars)
lightCars<- mtcars[mtcars$wt<2,]
```
nl[1]
lightCars<- mtcars[mtcars$wt<2,]
nl<- dim(lightCars)
nl[1]
lightCars
dim(mtcars)
mtcars$year <- 1974
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars<- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
answer<- mtcars[mtcars$mpg>=30 | mtcars$hp<60,]
answer
subset(mtcars, mpg>=30 | hp<60)
![me](me.jpg)
6.188/73.497
library(dataset)
library(datasets)
data(iris)
?iris
names(iris)
str(iris)
virginica<- iris[iris$Species==virginica,]
head(iris)
tail(iris)
virginica<- iris[iris$Sepal.Length==6.7,]
virginica
virginica<- iris[iris$Species=="virginica",]
virginica
mean(virginica$Sepal.Length)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cly), mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
q4<- sapply(split(mtcars$hp, mtcars$cyl), mean)
q4
q4[8]-q4[4]
q4[8]
q4[3]
q4$8-q4$4
q4[3]-q4(1)
q4[3]-q4[1]
ls
?ls
debug(ls)
ls
getwd()
setwd('/home/williamn/Repository/dataAnalysis/cachingMatrix')
getwd()
## Matrix inversion is usually a costly computation and
## their may be some benefit to caching the inverse of a matrix
## rather than compute it repeatedly.
## This script contains a pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
q()
q
q
